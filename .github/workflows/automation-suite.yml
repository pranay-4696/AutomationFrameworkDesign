name: Run Automation Suite

on:
  workflow_dispatch:
    inputs:
      suite_path:
        description: 'Path to the TestNG suite XML file'
        required: true
        default: 'testsuites/web/OrangeHrm/OrangeHrmSanity.xml'
        type: choice
        options:
          - testsuites/web/OrangeHrm/OrangeHrmSanity.xml
          - testsuites/api/ReqRes/ReqResTests.xml
      environment:
        description: 'Test Environment'
        required: true
        default: 'preprod'
        type: choice
        options:
          - preprod
          - uat
          - prod

jobs:
  # Stage 1: Build and Test Execution
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      # These permissions are needed for the artifact upload within this job
      pages: write
      id-token: write

    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4

      - name: ☕ Set up Java & Enable Maven Cache
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven' # ✅ This enables Maven dependency caching

      - name: 📦 Build & Run Suite
        # Use continue-on-error to ensure subsequent steps (like artifact upload) run
        # even if tests fail. The job itself will still be marked as failed.
        run: mvn clean test -DsuiteXmlFile=${{ github.event.inputs.suite_path }}
        env:
          JAVA_TOOL_OPTIONS: "-Dallure.results.directory=allure-results"
        continue-on-error: true # <--- Allows the job to continue if Maven test fails

      # Allure results are generated by Maven Surefire Plugin and placed in allure-results
      # No need to explicitly run allure generate here, as it's done in the next job
      - name: ⬆️ Upload Allure Results Artifact
        # This step will run regardless of the test results to ensure results are available
        # for the next job.
        if: always()
        uses: actions/upload-artifact@v4 # Use upload-artifact for raw results
        with:
          name: allure-results
          path: allure-results
          retention-days: 5 # Keep results for 5 days

  # Stage 2: Generate and Deploy Allure Report
  generate-and-deploy-report:
    # This job needs the 'build-and-test' job to complete first.
    # 'if: always()' ensures this job runs even if 'build-and-test' failed.
    needs: build-and-test
    if: always() # <--- Ensures this job runs even if the previous job failed
    runs-on: ubuntu-latest
    permissions:
      pages: write      # ✅ required for GitHub Pages
      id-token: write   # ✅ required for deployment

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4
        # We need to checkout the repository in this job too to get the workflow context
        # and potentially any other files needed for report generation.

      - name: ⬇️ Download Allure Results Artifact
        uses: actions/download-artifact@v4
        with:
          name: allure-results
          path: allure-results

      - name: 🧬 Install Allure CLI
        # This step will run regardless of the test results
        if: always() # Redundant if job has always(), but harmless
        run: |
          npm install -g allure-commandline@2.13.8 --save-dev
          allure --version

      - name: 🧪 Generate Allure Report
        # This step will run regardless of the test results
        if: always() # Redundant if job has always(), but harmless
        run: |
          # Ensure allure-results directory exists, even if empty or partially populated
          mkdir -p allure-results
          allure generate allure-results --clean -o allure-report

      - name: ☁️ Upload GitHub Pages artifact
        # This step will run regardless of the test results
        if: always() # Redundant if job has always(), but harmless
        uses: actions/upload-pages-artifact@v3
        with:
          path: allure-report

  # Stage 3: Deploy to GitHub Pages (uses the artifact uploaded by generate-and-deploy-report)
  deploy:
    needs: generate-and-deploy-report # Depends on the report generation job
    if: always() # Ensures deployment runs even if report generation had issues
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 # ✅ latest version
